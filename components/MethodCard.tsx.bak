import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardContent } from '@/lib/ui/components';
import MethodForm from './MethodForm';
import LoadingSpinner from './LoadingSpinner';
import JsonViewer from './JsonViewer';
import {
  fetchMethodFields,
  executeGrpcCall,
  getEndpointDisplay,
} from '@/utils/grpcHelpers';

export interface MethodCardProps {
  endpoint: string;
  service: string;
  method: string;
  useTLS: boolean;
}

const MethodCard: React.FC<MethodCardProps> = ({
  endpoint,
  service,
  method,
  useTLS,
}) => {
  const [fields, setFields] = useState<any[]>([]);
  const [response, setResponse] = useState<any>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchMethodFields(endpoint, service, method, useTLS)
      .then(setFields)
      .catch(console.error);
  }, [endpoint, service, method, useTLS]);

  const handleExecute = async (payload: object) => {
    setLoading(true);
    try {
      const res = await executeGrpcCall(
        endpoint,
        service,
        method,
        payload,
        useTLS
      );
      setResponse(res);
    } catch (err: any) {
      setResponse({ error: err.message });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="flex flex-col bg-dark-surface border border-dark-border rounded-lg overflow-hidden transition-all">
      <CardHeader className="glass-header flex justify-between items-center px-4 py-2 bg-dark-highlight border-b border-dark-border">
        <div className="flex items-center">
          <div className="flex gap-2 mr-4">
            <button className="traffic-button bg-red-500" />
            <button className="traffic-button bg-yellow-500" />
            <button className="traffic-button bg-green-500" />
          </div>
          <div>
            <h3 className="text-text-primary font-medium text-sm">
              {getEndpointDisplay(endpoint)}
            </h3>
            <p className="text-text-secondary text-xs">
              {service}.{method}()
            </p>
          </div>
        </div>
      </CardHeader>
      <CardContent className="p-4 flex flex-col gap-4">
        {loading && <LoadingSpinner />}

        {!loading && (
          <>
            <MethodForm fields={fields} onExecute={handleExecute} />

            {response && (
              <div className="mt-4">
                <JsonViewer data={response} title="Response" fullWidth />
              </div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  );
};

export default MethodCard;
